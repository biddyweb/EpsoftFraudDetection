raw_data1 <- read.csv('data//糖尿病_sequence.csv')
str_name_join <- function(a){
a <- as.character(a)
str <- paste(unlist(lapply(strsplit(unlist(strsplit(substr(a,2,nchar(a)-1),split=';')),split=':'),function(x){x[1]})),collapse=' ')
size <- length(unlist(strsplit(substr(a,2,nchar(a)-1),split=';')))
return(list(str,size))
}
tmp4 <- t(matrix(unlist(apply(matrix(raw_data1$诊疗,ncol=1),1,str_name_join)),nrow=2))
arulesequence <- data.frame(sequenceID = raw_data1$人员编码,eventID=raw_data1$就诊日期,size=as.integer(as.character(tmp4[,2])),itemset=tmp4[,1])
arulesequence1<-arulesequence[which(arulesequence$size!=0),]
write.table(arulesequence1,'test4.txt',row.names = F,quote=F,col.names=F)
# need to cut this data file to package file
x4 <- read_baskets(con  = system.file("misc", "test4.txt", package =
"arulesSequences"),
info = c("sequenceID","eventID","SIZE"))
library(arulesSequences)
x4 <- read_baskets(con  = system.file("misc", "test4.txt", package =
"arulesSequences"),
info = c("sequenceID","eventID","SIZE"))
x4 <- read_baskets(con  = system.file("misc", "test4.txt", package =
"arulesSequences"),
info = c("sequenceID","eventID","SIZE"))
install.packages("TraMineR")
install.packages("TraMineRextras")
library("TraMineR", lib.loc="D:/R/R-3.0.1/library")
raw_data1 <- read.csv('data//糖尿病_sequence.csv')
raw_data <- read.csv('data//糖尿病_sequence.csv')
install.packages("xtable")
dir.create("Graphiques", showWarnings = FALSE)
graphdir <- "Graphiques/"
repos="http://mephisto.unige.ch/traminer/R")
install.packages("TraMineR", repos="http://mephisto.unige.ch/traminer/R")
install.packages("TraMineR", repos = "http://mephisto.unige.ch/traminer/R")
library("TraMineR")
data("mvad")
mvad.alphab <- c("employment", "FE", "HE", "joblessness", "school", "training")
mvad.seq <- seqdef(mvad, 17:86, xtstep=6, alphabet=mvad.alphab)
library(arules)
library(randomForest)
# extraction
str_name_join <- function(a){
a <- as.character(a)
str <- paste(unlist(lapply(strsplit(unlist(strsplit(substr(a,2,nchar(a)-1),split=';')),split=':'),function(x){x[1]})),collapse=',')
size <- length(unlist(strsplit(substr(a,2,nchar(a)-1),split=';')))
return(list(str,size))
}
# import the data
raw_data <- read.csv('data//肺感染住院信息-20130902.txt',header=T,sep='|')
raw_data$医院编码 <- factor(raw_data$医院编码)
tmp <- t(matrix(unlist(apply(matrix(raw_data$西药清单,ncol=1),1,str_name_join)),nrow=2))
pattern <- gsub('阿司匹林,|葡萄糖,|氯化钠,|氯化钾,','',tmp[,1])
write(pattern, file = "tmp_basket")
trans <- read.transactions("tmp_basket",format = "basket", sep=",",rm.duplicates=T)
trans@transactionInfo <- data.frame(transactionID=raw_data$就诊ID)
if(file.exists('tmp_basket')) file.remove('tmp_basket')
#build the model
closed <- eclat(trans,
parameter = list(minlen=2,maxlen=10,support=0.05,tidLists=TRUE,
target = "closed frequent itemsets"))
FrequentMedicineSet <- subset(sort(closed,by = 'support'))
FrequentMedicineSetList <- as(FrequentMedicineSet@tidLists,'list')
result <- cbind(as(FrequentMedicineSet,'data.frame'),tidlist=unlist(lapply(FrequentMedicineSetList,function(x){paste(x,collapse=' ')})))
scores <- matrix(nrow = nrow(raw_data), ncol = 2,0)
scores[,1] <- raw_data$就诊ID
for(i in 1:nrow(result)){
scores[scores[,1] %in% unlist(strsplit(as.character(result$tidlist[i]),' ')),2] = scores[scores[,1] %in% unlist(strsplit(as.character(result$tidlist[i]),' ')),2] + result$support[i]
}
View(scores)
sort(scores[,2],decreasing=T)
summary(scores[,2])
1325*0.05
sort(scores[,2],decreasing=F)
sort(scores[,2],decreasing=F)[1:70]
sort(scores[,2],decreasing=F)[1:100]
closed <- eclat(trans,
parameter = list(minlen=1,maxlen=2,support=0.05,tidLists=TRUE,
target = "closed frequent itemsets"))
FrequentMedicineSet <- subset(sort(closed,by = 'support'))
FrequentMedicineSetList <- as(FrequentMedicineSet@tidLists,'list')
result <- cbind(as(FrequentMedicineSet,'data.frame'),tidlist=unlist(lapply(FrequentMedicineSetList,function(x){paste(x,collapse=' ')})))
scores <- matrix(nrow = nrow(raw_data), ncol = 2,0)
scores[,1] <- raw_data$就诊ID
for(i in 1:nrow(result)){
scores[scores[,1] %in% unlist(strsplit(as.character(result$tidlist[i]),' ')),2] = scores[scores[,1] %in% unlist(strsplit(as.character(result$tidlist[i]),' ')),2] + result$support[i]
}
sort(scores[,2],decreasing=F)
library(TraMineR)
library(xtable)
dir.create("Graphiques", showWarnings = FALSE)
graphdir <- "Graphiques/"
install.packages("TraMineR", repos="http://mephisto.unige.ch/traminer/R")
library("TraMineR")
data("mvad")
mvad.alphab <- c("employment", "FE", "HE", "joblessness", "school", "training")
install.packages("TraMineR", repos = "http://mephisto.unige.ch/traminer/R")
install.packages("TraMineR", repos = "http://mephisto.unige.ch/traminer/R")
mvad.alphab <- c("employment", "FE", "HE", "joblessness", "school", "training")
mvad.seq <- seqdef(mvad, 17:86, xtstep=6, alphabet=mvad.alphab)
library("TraMineR")
mvad.seq <- seqdef(mvad, 17:86, xtstep=6, alphabet=mvad.alphab)
View(mvad)
mvad.om <- seqdist(mvad.seq, method = "OM", indel = 1, sm = "TRATE")
mvad.seq
library("cluster")
clusterward <- agnes(mvad.om, diss=TRUE, method="ward")
mvad.cl4 <- cutree(clusterward, k=4)
mvad.cl4
cl4.lab <- factor(mvad.cl4, labels = paste("Cluster",1:4))
cl4.lab
seqdplot(mvad.seq, group=cl4.lab, border=NA)
seqfplot(mvad.seq, group=cl4.lab, border=NA)
seqiplot(mvad.seq, group=cl4.lab, border=NA)
seqHtplot(mvad.seq)
mvad.seq
mvad.seqe <- seqecreate(mvad.seq)
fsubseq <- seqefsub(mvad.seqe,pMinSupport=0.05)
plot(fsubseq[1:15])
fsubseq
mvad.seq
mvad.seqe
head(mvad.seqe)
head(mvad.seq)
fsubseq
library(arules)
StrNameJoin <- function(a){
a <- as.character(a)
str <- paste(unlist(lapply(strsplit(unlist(strsplit(substr(a,2,nchar(a)-1),split=';')),split=':'),function(x){x[1]})),collapse=',')
size <- length(unlist(strsplit(substr(a,2,nchar(a)-1),split=';')))
return(list(str,size))
}
GenerateStrsizematrixFromRawdata<-function(x){
return (t(matrix(unlist(apply(matrix(x,ncol=1),1,StrNameJoin)),nrow=2)))
}
GenerateTransFromStrsizematrix <- function(x){
write(x, file = "tmp_basket")
trans <- read.transactions("tmp_basket",format = "basket", sep=",",rm.duplicates=T)
trans@transactionInfo <- data.frame(transactionID=raw_data$就诊ID)
if(file.exists('tmp_basket')) file.remove('tmp_basket')
return (trans)
}
rawdata <- read.csv('data//糖尿病_sequence.csv')
xiyao <- generate_str_size_matrix(raw_data$西药清单)
zhongchengyao <- generate_str_size_matrix(raw_data$中成药清单)
zhongyao <- generate_str_size_matrix(raw_data$中药清单)
zhenliao <- generate_str_size_matrix(raw_data$诊疗)
xiyao <- GenerateStrsizematrixFromRawdata(raw_data$西药清单)
zhongchengyao <- GenerateStrsizematrixFromRawdata(raw_data$中成药清单)
xiyao <- GenerateStrsizematrixFromRawdata(rawdata$西药清单)
zhongchengyao <- GenerateStrsizematrixFromRawdata(rawdata$中成药清单)
zhongyao <- GenerateStrsizematrixFromRawdata(rawdata$中药清单)
zhenliao <- GenerateStrsizematrixFromRawdata(rawdata$诊疗)
head(xiyao)
tail(xiyao)
View(xiyao)
zhenliao.trans <- GenerateTransFromStrsizematrix(zhenliao[,1])
GenerateTransFromStrsizematrix <- function(x){
write(x, file = "tmp_basket")
trans <- read.transactions("tmp_basket",format = "basket", sep=",",rm.duplicates=T)
trans@transactionInfo <- data.frame(transactionID=rawdata$就诊ID)
if(file.exists('tmp_basket')) file.remove('tmp_basket')
return (trans)
}
zhenliao.trans <- GenerateTransFromStrsizematrix(zhenliao[,1])
tmp <- sort(itemFrequency(zhenliao.trans,type='absolute'),decreasing=T)
itemFrequencyPlot(zhenliao.trans,cex.names=0.6,topN=20,type='absolute')
write.csv('糖尿病.csv',rawdata)
write.csv(rawdata,'糖尿病.csv')
colname(rawdata)
colnames(rawdata)
zhenliao.trans
yaopin.all <- rbind(xiyao,zhongyao,zhongchengyao,zhenliao)
yaopin.all <- cbind(xiyao,zhongyao,zhongchengyao,zhenliao)
itemFrequency(zhenliao.trans,cex.names=0.6,topN=20,type='absolute')
itemFrequency(zhenliao.trans,topN=20,type='absolute')
itemFrequency(zhenliao.trans,type='absolute')
View(xiyao)
library("TraMineR", lib.loc="D:/R/R-3.0.1/library")
